name: deploy_to_cocoapods

permissions:
  contents: write
  pull-requests: write
  
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      
jobs:
  release:
    if: contains(github.event.pull_request.labels.*.name, 'bump-ios-sdk')
    runs-on: macOS-latest
    steps:
    - name: Checkout 
      uses: actions/checkout@v4
      with:
        fetch-depth: 0      
        fetch-tags: true
        
    - name: Auto-merge bump PRs
      run: |
        echo "‚û°Ô∏è Auto-merge allowed for PR #${{ github.event.pull_request.number }}"
        gh pr merge ${{ github.event.pull_request.number }} --rebase --delete-branch
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
    - name: Sync main after PR merge
      run: |
        echo "üîÑ Syncing local main with origin/main..."
        git fetch origin main
        git checkout main
        git reset --hard origin/main
        echo "‚úÖ Local main is now aligned with merged PR"

    - name: Export latest tag to Github environment variables
      run: |
        LATEST_SDK_VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
        echo "LATEST_SDK_VERSION=$LATEST_SDK_VERSION" >> $GITHUB_ENV
        echo "‚û°Ô∏è Latest tag is: $LATEST_SDK_VERSION"

    - name: Force update latest tag to include Package.swift
      run: |
        echo "üîç Preparing to re-tag ${{ env.LATEST_SDK_VERSION }} on latest commit"
        git tag -f ${{ env.LATEST_SDK_VERSION }}
        git push origin -f refs/tags/${{ env.LATEST_SDK_VERSION }}
        echo "‚úÖ Tag ${{ env.LATEST_SDK_VERSION }} successfully updated."
      
    - name: Download SDK zip from release
      run: |
        echo "üì¶ Downloading SDK release assets for version: ${{ env.LATEST_SDK_VERSION }}"
        gh release download ${{ env.LATEST_SDK_VERSION }} \
          --repo ${{ github.repository }} \
          --pattern "Utiq-${{ env.LATEST_SDK_VERSION }}.zip" \
          --dir .
        echo "‚úÖ Download complete, listing files in current directory:"
        ls -lh .
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Unzip SDK
      run: |
        echo "üìÇ Unzipping SDK package: Utiq-${{ env.LATEST_SDK_VERSION }}.zip"
        unzip -o Utiq-${{ env.LATEST_SDK_VERSION }}.zip -d .
        echo "‚úÖ Unzip complete. Listing extracted contents:"
        ls -R .
        echo "üîç Checking if Utiq.xcframework exists:"
        if [ -d "Utiq.xcframework" ]; then
          echo "‚úÖ Found Utiq.xcframework"
        else
          echo "‚ùå ERROR: Utiq.xcframework not found!"
          exit 1
        fi
  
    - name: Install Cocoapods
      run: |
        echo "üì¶ Installing CocoaPods..."
        gem install cocoapods
        echo "‚úÖ CocoaPods installed: $(pod --version)"

    - name: Show Podspec contents
      run: |
        echo "üîé Podspec contents:"
        cat Utiq.podspec

    - name: Show Package.swift contents
      run: |
        echo "üîé Package.swift contents:"
        cat Package.swift

    - name: Validate Podspec (lint only)
      run: |
        echo "üß™ Validating Utiq.podspec before push..."
        pod lib lint --allow-warnings --verbose
        echo "‚úÖ Podspec validation passed."

    - name: Deploy to Cocoapods
      run: |
        echo "üöÄ Pushing Utiq SDK v${{ env.LATEST_SDK_VERSION }} to CocoaPods trunk..."
        pod trunk push --allow-warnings --verbose
        echo "üéâ Successfully pushed Utiq SDK v${{ env.LATEST_SDK_VERSION }} to CocoaPods trunk."
      env:
        COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPOD_TOKEN }}
